=========================================================================
TEST TOOL. (C) Roman Elizarov, 2004
Usage: t [^<subcommand^> [^<arguments^>...]]
"t help" shows this help. Other available subcommands are:
build, check, xml, pcms, clean, make, run, time 
(case is not important for subcommands).
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
DIRECTORY STRUCTURE
Test tool assumes that each directory with problem has "tests"
subdirectory with test files that are named 01, 02, 03,..., 99.
Alternatively, instead of "XX" test file it may contain "doXX.dpr"
file that prints to the console contents of the corresponding test.
Alternatively, it may contain "doall.*" instead of all tests
"doall" shall create ALL test files and may assume that it is being 
called from the tests directory.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Answer files are placed into "XX.a" files after build. They are 
generated by running a specified model solution.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Build, check, and clean subcommands may be used from the top-level
directory. They always recursively scan subdirectories for problem
directories and perform their task for each problem.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
SPECIFYING SOLUTION
Build and check subcommands accept solution as their first and only
argument. Source or executable file with solution may be explicitly
specified (see make subcommand for a list of supported extensions).
For example, "t build solution.dpr" will build answer files using
"solution.dpr". Suffix for the solution name may be specified
instead. In this case, problem and underscore are appended before the
specified suffix. For example, "t build re.dpr" for problem called
"box" will generate answers using "box_re.dpr". Extension may be
omitted in the suffix, so the last command may be shortened to just
"t build re". Combined with recursive behavior one can run it in the
top-level directory to check all problems with solutions that have
"re" suffix. If solution is omitted entirely, then problem name is
used instead. For example "t build" for problem called "box" will
generate answer using "box.dpr", or "box.java", or "box.cpp", etc if
one of the corresponding files exits.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
BUILD
Usage: t build [^<solution^> [^<tests^>...]]
Builds test files and answer files. It creates "build.log" file
where outcome for each test is listed (one test on a line). If
solution is not found, then answer files are not generated. Works
for all available tests unless the the list of tests is explicitly 
specified. When all tests are being built it also compiles checker
program named "check" if it exists.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
CHECK
Usage: t check [^<solution^> [^<tests^>...]]
Checks specified solution. It creates "check.log" file where outcome
for each test is listed (one test on a line). Checker program shall be
named "check" and shall accept "input output answer" arguments in this
order. Works with all available tests unless the list of tests is 
explicitly specified.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
XML
Usage: t xml [^<prefix^> [^<time-limit^> [^<memory-limit^>]]]
Builds "problem.xml", so that problem can be used with PCMS2-v2
contest management system. You must successfully use build subcommand
before using xml subcommand. Prefix is prepended to problem identifiers
(default is empty). Default time limit is 2s, memory limit 67108864.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
PCMS
Usage: t pcms
Copies all PCMS configuration files (problem.xml, tests, checker) into a 
separate directory. You must "build" and "xml" first.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
ARCHIVE
Usage: t pcms
Copies correct solutions into a echo separate directory.
You must "build" and "xml" first.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
CLEAN
Usage: t clean
Cleans all auxiliary files that might have been created during build,
xml, and check operations.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
MAKE
Usage: t make ^<srcfile^>
Makes the specified source file. Supported extensions are .dpr, .java,
.cpp, .c, .hs, .ml, .cmd, .exe. In the later cases (.cmd, .exe extensions) make 
just silently quits. Extension may be entirely omitted. In this case make 
will try echo to find the file by attaching extensions in the order they 
are listed above. For example, "t make solution" will compile "solution.dpr"
file (if it exits) using Borland Delphi. During compilation it includes
"..\testlib" directory (relative to the directory of the main "t.cmd"
file) into the compilation path. Any additional libraries that are
common to all problems shall be stored there.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
RUN
Usage: t run ^<srcfile^> [^<arguments^>...]
Runs the specified source or executable file. It assumes that the
source file is already compiled using make subcommand and uses the
corresponding command to run it. For example, "t run solution.dpr"
will actually run "solution.exe", while "t run solution.java" will
actually run "java solution". Extension may be omitted just like in
make subcommand. 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
TIME
Usage: t time ^<srcfile^> [^<arguments^>...]
Works like run subcommand, but execution is wrapped into 
"..\bin\run.exe -q -x" call (relative to the directory of the main 
"t.cmd" file) if the corresponding wrapper file exists, otherwise 
run is performed directly.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
FEEDBACK
Please report all bugs and suggestions for this tool to Roman Elizarov
using email elizarov@acm.org
=========================================================================
